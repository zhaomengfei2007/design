package com.factoryMothod;
/*
 * 有一个大的工厂它就是 VehicleFactory，VehicleFactory工厂里又有很多生产车间，
 * 其中有一个就是 ComputerFactory。我们的具体产品都是通过这些生产车间来负责生产的。
 * */
public abstract class VehicleFactory {
	public abstract Playable create();
}
/*
 * 优点
 * 符合开-闭原则；新增一种产品时，只需要增加相应的具体产品类和相应的工厂子类即可。
 * 符合单一职责原则；每个具体工厂类只负责创建对应的产品，不使用静态工厂方法，可以形成基于
 * 继承的等级结构。
 * 
 * 缺点
 * （1）添加新产品时，除了增加新产品类外，还要提供与之对应的具体工厂类，系统类的个数将成对
 * 增加，在一定程度上增加了系统的复杂度；同时，有更多的类需要编译和运行，会给系统带来一些
 * 额外的开销；
 * （2）由于考虑到系统的可扩展性，需要引入抽象层，在客户端代码中均使用抽象层进行定义，增加了
 * 系统的抽象性和理解难度，且在实现时可能需要用到DOM、反射等技术，增加了系统的实现难度。
 * （3）虽然保证了工厂方法内的对修改关闭，但对于使用工厂方法的类，如果要更换另外一种产品，
 * 仍然需要修改实例化的具体工厂类；
 * （4）一个具体工厂只能创建一种具体产品。
 * 
 * 应用场景
 * （1）当一个类不知道它所需要的对象的类时；
 * （2）当一个类希望通过其子类来指定创建对象时；
 * （3）将创建对象的任务委托给多个工厂子类中的某一个，客户端在使用时可以无须关心是哪一个工厂
 * 子类创建产品子类，需要时再动态指定，可将具体工厂类的类名存储在配置文件或数据库中。
 */